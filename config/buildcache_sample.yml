increment: 100
sleep: 0
count:
- name: count
  text: SELECT count(*) > $1 as check, count(*)  as count FROM postgres.locations_table1_hold;
  values:
buffer:
- name: truncate buffers
  text: TRUNCATE table postgres.locations_buffers_cache_hold;
  values:
- name: create buffers
  text: INSERT INTO postgres.locations_buffers_cache_hold (SELECT (row_number() OVER (ORDER BY (SHAPE)))::integer as objectid, distance, locationid, shape FROM postgres.postgres ORDER BY distance DESC);
  values:
- name: vaucum buffers
  text: VACUUM ANALYZE postgres.locations_buffers_cache_hold
  values:
- name: reindex buffers
  text: REINDEX TABLE postgres.locations_buffers_cache_hold;
  values:
- name: clear cache
  text: TRUNCATE TABLE postgres.data_cache_hold;
  values:
- name: Resequence Cache HOLD
  text: ALTER SEQUENCE postgres.data_cache_hold_objectid_seq RESTART WITH 1;;
  values:
- name: ReIndex City Limits Shapes
  text: REINDEX INDEX postgres.city_limits_hold_shape;
  values:
- name: ReIndex Crime Shapes
  text: REINDEX INDEX postgres.crime_hold_shape;
  values:
- name: ReIndex Permit Shapes
  text: REINDEX INDEX postgres.permits_hold_shape;
  values:
- name: vaucum cache
  text: VACUUM ANALYZE postgres.data_cache_hold;
  values:
buffercheck:
- name: check buffers
  text: select now();
  values:
- name:  count distances
  text: select now():
  values:
buildcache:
- name: Crime
  text: INSERT INTO postgres.locations_buffers_cache_hold (SELECT DISTINCT avw.locationid, 'CRIME'::varchar(150) as type, avw.distance as distance, (SELECT string_agg(tp,',')::text FROM (SELECT b.crimeid::text as tp FROM postgres.crime_hold_shape b WHERE st_contains(avw.shape,b.shape )) as hold)::text as data,''::text datajson FROM postgres.locations_buffers_cache_hold AS avw LEFT JOIN postgres.locations_buffers_cache_hold buf ON buf.locationid = avw.locationid LEFT JOIN postgres.crime_hold_shape addr ON addr.locationid = buf.locationid WHERE avw.distance = ANY($3::numeric[]) and avw.locationid in (select locationid from postgres.crime_hold_shape order by locationid limit $1 offset $2))
  values: [82.5000,660.0000,1320.0000,330.0000,65.0000]
- name: Permits
  text: INSERT INTO postgres.locations_buffers_cache_hold (SELECT DISTINCT avw.locationid,'PERMITS'::varchar(150) as type, avw.distance as distance, (SELECT string_agg(tp,',')::text FROM (SELECT DISTINCT b.apn::text as tp FROM postgres.permits_hold b WHERE st_contains(avw.shape,b.shape) ) as hold)::text as data, ''::text datajson FROM postgres.locations_buffers_cache_hold AS avw LEFT JOIN postgres.locations_buffers_cache_hold buf ON buf.locationid = avw.locationid LEFT JOIN postgres.crime_hold_shape addr ON addr.locationid = buf.locationid WHERE avw.distance = ANY($3::numeric[]) and avw.locationid in (select locationid from postgres.crime_hold_shape order by locationid limit $1 offset $2))
  values: [82.5000,660.0000,1320.0000,330.0000,65.0000]
- name: Address In City
  text: INSERT INTO postgres.locations_buffers_cache_hold (SELECT DISTINCT civx.locationid, 'ADDRESS IN CITY'::varchar(150) as type,$3::numeric(38,8) as distance,CASE WHEN (SELECT string_agg(tp,',')::text FROM (SELECT b.jurisdiction_type::text as tp FROM postgres.city_limits_hold_shape b WHERE st_intersects(addr.shape,b.shape))  as hold)::varchar(255) like '%Asheville Corporate Limits%' THEN 'YES' ELSE 'NO' END as data FROM postgres.property_hold as a LEFT JOIN postgres.pinnum_centerline_xref_view_hold civx ON civx.pinnum = a.pinnum LEFT JOIN postgres.locations_table1_hold addr ON addr.locationid = civx.locationid WHERE addr.locationid in (select distinct locationid from postgres.locations_table1_hold order by locationid limit $1 offset $2));
  values: [0]
